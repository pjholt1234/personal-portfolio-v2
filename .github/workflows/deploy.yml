name: Deploy to EC2

on:
  push:
    branches:
      - master

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    env:
      BACKEND_URL: http://13.51.170.162:8001
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build frontend image
        run: |
          docker build -t personal-portfolio-frontend:latest ./frontend
          docker save personal-portfolio-frontend:latest > frontend.tar

      - name: Build backend image
        run: |
          docker build -t personal-portfolio-backend:latest ./backend
          docker save personal-portfolio-backend:latest > backend.tar

      - name: Generate production docker-compose
        env:
          APP_KEY: ${{ secrets.APP_KEY }}
        run: |
          # Create docker-compose.prod.yml from template
          envsubst < docker-compose.prod.example.yml > docker-compose.prod.yml

      - name: Copy files to EC2
        env:
          SSH_PRIVATE_KEY: ${{ secrets.EC2_SSH_KEY }}
          EC2_HOST: 13.51.170.162
          EC2_USERNAME: ubuntu
        run: |
          echo "$SSH_PRIVATE_KEY" > ssh_key
          chmod 600 ssh_key
          
          # Create necessary directories on EC2
          ssh -i ssh_key -o StrictHostKeyChecking=no $EC2_USERNAME@$EC2_HOST 'mkdir -p ~/backend/database ~/backend/storage'
          
          # Copy Docker images and compose file
          scp -v -i ssh_key -o StrictHostKeyChecking=no \
            frontend.tar \
            backend.tar \
            docker-compose.prod.yml \
            backend/database/database.sqlite \
            $EC2_USERNAME@$EC2_HOST:~/backend/database/
            
          # Copy storage directory
          scp -v -r -i ssh_key -o StrictHostKeyChecking=no \
            backend/storage/* \
            $EC2_USERNAME@$EC2_HOST:~/backend/storage/

      - name: Deploy to EC2
        env:
          SSH_PRIVATE_KEY: ${{ secrets.EC2_SSH_KEY }}
          EC2_HOST: 13.51.170.162
          EC2_USERNAME: ubuntu
        run: |
          echo "$SSH_PRIVATE_KEY" > ssh_key
          chmod 600 ssh_key
          
          ssh -i ssh_key -o StrictHostKeyChecking=no $EC2_USERNAME@$EC2_HOST '
            # Load new images
            docker load < frontend.tar
            docker load < backend.tar
            
            # Set proper permissions
            sudo chown -R www-data:www-data ~/backend/storage ~/backend/database
            sudo chmod -R 775 ~/backend/storage ~/backend/database
            
            # Start containers with new images
            docker compose -f docker-compose.prod.yml up -d
            
            # Cleanup
            rm frontend.tar backend.tar
          ' 