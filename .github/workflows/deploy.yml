name: Deploy to EC2

on:
  push:
    branches:
      - master

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    env:
      BACKEND_URL: ${{ vars.BACKEND_URL }}
      API_TOKEN: ${{ secrets.API_TOKEN }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build frontend image
        run: |
          docker build -t personal-portfolio-frontend:latest \
            --build-arg VITE_BACKEND_URL=$BACKEND_URL \
            --build-arg VITE_API_URL=$BACKEND_URL \
            --build-arg VITE_API_TOKEN=$API_TOKEN \
            ./frontend
          docker save personal-portfolio-frontend:latest > frontend.tar

      - name: Build backend image
        run: |
          docker build -t personal-portfolio-backend:latest ./backend
          docker save personal-portfolio-backend:latest > backend.tar

      - name: Generate production docker-compose
        env:
          APP_KEY: ${{ secrets.APP_KEY }}
          API_TOKEN: ${{ secrets.API_TOKEN }}
        run: |
          # Create docker-compose.prod.yml from template
          envsubst < docker-compose.prod.example.yml > docker-compose.prod.yml

      - name: Copy files to EC2
        env:
          SSH_PRIVATE_KEY: ${{ secrets.EC2_SSH_KEY }}
          EC2_HOST: ${{ vars.EC2_HOST }}
          EC2_USERNAME: ${{ vars.EC2_USERNAME }}
        run: |
          echo "$SSH_PRIVATE_KEY" > ssh_key
          chmod 600 ssh_key
          
          # Copy Docker images and compose file
          scp -v -i ssh_key -o StrictHostKeyChecking=no \
            frontend.tar \
            backend.tar \
            docker-compose.prod.yml \
            $EC2_USERNAME@$EC2_HOST:~/

      - name: Deploy to EC2
        env:
          SSH_PRIVATE_KEY: ${{ secrets.EC2_SSH_KEY }}
          EC2_HOST: ${{ vars.EC2_HOST }}
          EC2_USERNAME: ${{ vars.EC2_USERNAME }}
        run: |
          echo "$SSH_PRIVATE_KEY" > ssh_key
          chmod 600 ssh_key
          
          ssh -i ssh_key -o StrictHostKeyChecking=no $EC2_USERNAME@$EC2_HOST '
            # Ensure directories exist with proper permissions
            sudo mkdir -p ~/backend/database \
              ~/backend/storage/app/public \
              ~/backend/storage/framework/cache \
              ~/backend/storage/framework/sessions \
              ~/backend/storage/framework/views \
              ~/backend/storage/logs
            sudo chown -R ubuntu:ubuntu ~/backend
            sudo chmod -R 775 ~/backend
            
            # Load new images
            docker load < frontend.tar
            docker load < backend.tar
            
            # Start containers with new images
            docker compose -f docker-compose.prod.yml up -d
            
            # Create storage link and set permissions inside container
            docker exec ubuntu-backend-1 rm -rf /var/www/html/public/storage
            docker exec ubuntu-backend-1 mkdir -p /var/www/html/public
            docker exec ubuntu-backend-1 php artisan storage:link
            
            # Set permissions on host
            sudo chown -R www-data:www-data ~/backend/storage ~/backend/database
            sudo chmod -R 775 ~/backend/storage ~/backend/database
            
            # Cleanup
            rm frontend.tar backend.tar
          ' 